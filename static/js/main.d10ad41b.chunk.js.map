{"version":3,"sources":["components/Quote.jsx","components/ButtonsBox.jsx","components/util/colorUpdate.js","components/Main.jsx","components/util/Data.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["Quote","text","author","className","id","aria-label","ButtonsBox","onClick","href","encodeURIComponent","target","rel","title","updateColor","color","document","body","style","background","getElementById","querySelector","Main","loading","quoteGenerator","colorGenerator","useState","mounted","setMounted","quoteObj","setQuote","setColor","useEffect","quote","quoteBlock","transitionName","transitionEnterTimeout","transitionLeaveTimeout","Data","a","fetch","response","json","jsonResponse","quotes","styles","App","setQuotes","then","setLoading","length","Math","floor","random","num","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d10ad41b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Quote = ({text,author}) => (\n    <div className=\"text-box\">\n        <p id=\"text\">\n            <span className=\"quote\"><i className=\"fas fa-quote-left\" aria-label=\"quote icon\"></i></span> \n            {text}\n        </p>\n        <p id=\"author\">\n            - {author}\n        </p>\n    </div>\n)\n\nexport default Quote;","import React from 'react';\n\nconst ButtonsBox = ({onClick,text,author}) => (\n  <div className=\"buttons-box\">\n    <div className=\"icon-box\">\n      <a\n        id=\"tweet-quote\"\n        href= {`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${text}\" ${author} `)}`}\n        target = \"_blank\"\n        rel=\"noopener noreferrer\"\n        title=\"Tweet this quote!\"\n        >\n            <i className=\"fab fa-twitter\" />\n      </a>\n    </div>\n    <div className=\"button-box\">\n      <button\n        id=\"new-quote\"\n        onClick={onClick}\n      >\n        New Quotes\n      </button>\n    </div>\n  </div>\n)\n\nexport default ButtonsBox;","function updateColor(color){\r\n    document.body.style.background = `${color}`;\r\n    document.getElementById(\"text\").style.color = `${color}`;\r\n    document.getElementById(\"author\").style.color = `${color}`;\r\n    document.querySelector(\".icon-box\").style.background = `${color}`;\r\n    document.getElementById(\"new-quote\").style.background = `${color}`\r\n}\r\n\r\nexport default updateColor;","import React, { useState , useEffect } from 'react';\nimport Quote from './Quote'; // Quote Block component\nimport ButtonsBox from './ButtonsBox'; // Buttons box Component\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'; \nimport updateColor from './util/colorUpdate';\n\n\n\nconst Main = ( { loading, quoteGenerator, colorGenerator} ) =>{\n    \n    const [mounted , setMounted] = useState(false);\n    const [quoteObj, setQuote] = useState({});\n    const [color, setColor] = useState('');\n\n    const handleClick = () => {\n        setMounted(false);\n        setQuote(quoteGenerator);\n        setColor(colorGenerator);\n        updateColor(color)\n    }\n    //First side effect after rendering, only is invoked once\n    useEffect( () =>{\n        if(loading){\n            //console.log('here we go')\n            setQuote(quoteGenerator);\n            setMounted(true);\n            setColor(colorGenerator)\n        }\n    },[loading,colorGenerator,quoteGenerator]);\n        \n    //Second side effect after rendering, is invoked when handleClick is trigger and after the first side-effect\n\n    useEffect( () =>{\n        if(loading && !mounted){\n            //console.log('here we go again')\n            setMounted(!mounted);\n        }\n    },[loading,mounted]);\n\n    //console.log(loading)\n    //console.log(mounted);\n    //console.log(quoteObj);\n    //console.log(color)\n    \n    if(loading){\n        let {quote,author} = quoteObj;\n        //This is for active the transition componenet\n        let quoteBlock = mounted && (<Quote text = {quote} author = {author}/>)\n    \n        return(\n            <div id=\"quote-box\">\n              <ReactCSSTransitionGroup\n              transitionName=\"example\"\n              transitionEnterTimeout={800}\n              transitionLeaveTimeout={500}\n              >\n                {quoteBlock}\n              </ReactCSSTransitionGroup>\n              <ButtonsBox \n              onClick = {handleClick}\n              text = {quote}\n              author = {author} \n              />\n            </div>\n        )\n    }else{\n        // while we wait for the data\n        return (\n            <div className = 'wait'>\n                <h1>Wait a minute....</h1>\n            </div>\n        )\n    }\n}\n\nexport default Main","const url = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nconst Data = async () => {\n    const response = await fetch(url);\n    const jsonResponse = await response.json()\n    \n    if(jsonResponse.quotes) return jsonResponse; \n}\n\nexport default Data;","const styles = [\r\n    \"#845EC2\",\r\n    \"#D65DB1\",\r\n    \"#0081CF\",\r\n    \"#C34A36\",\r\n    \"#4B4453\",\r\n    \"#D63423\",\r\n    \"#02394A\",\r\n    \"#EB4B98\",\r\n    \"#043565\",\r\n    \"#031D38\",\r\n    \"#30156F\",\r\n    \"#8F4076\",\r\n    \"#2A5292\",\r\n    \"#463169\",\r\n    \"#6A261B\",\r\n    \"#7B7484\",\r\n    \r\n]\r\nexport default styles;","import React, {useState , useEffect} from 'react';\r\nimport './styles/styles.scss';\r\nimport Main from './components/Main';\r\nimport Data from './components/util/Data';\r\nimport styles from \"./styles\";\r\n\r\n\r\nconst App = () => {\r\n  \r\n  // State Quote and update function\r\n  const [quotes , setQuotes] = useState([]);\r\n \r\n  //First Update after first rendering\r\n  useEffect( () => {\r\n    Data()\r\n      .then( response => {\r\n        setQuotes([...response.quotes])\r\n      });\r\n  }, [] );\r\n \r\n  // State Loading and update function\r\n  const [loading , setLoading] = useState(false); \r\n \r\n  //Second Update after first rendering (actually second rendering)\r\n  useEffect( () => {\r\n    if(quotes.length > 0){\r\n      setLoading(true)\r\n    }\r\n  }, [quotes.length])\r\n  \r\n  const randomColor = () => {\r\n    return styles[Math.floor(Math.random() * styles.length)]\r\n  }\r\n\r\n  const randomQuote = () => {\r\n    if(quotes.length > 0){\r\n      const num = Math.floor(Math.random() * quotes.length);\r\n      return quotes[num];\r\n    } \r\n  }\r\n  \r\n //console.log(quotes)\r\n //console.log(loading)\r\n //console.log(randomColor())\r\n //console.log(randomQuote())\r\n  return (\r\n    <Main colorGenerator = {randomColor} quoteGenerator = {randomQuote} loading = {loading}/>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}